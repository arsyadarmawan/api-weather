// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source=api.go -destination=mockuber/api.go -package=mockuber
//

// Package mockuber is a generated GoMock package.
package mockuber

import (
	context "context"
	api "openweather/api"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWeatherApi is a mock of WeatherApi interface.
type MockWeatherApi struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherApiMockRecorder
}

// MockWeatherApiMockRecorder is the mock recorder for MockWeatherApi.
type MockWeatherApiMockRecorder struct {
	mock *MockWeatherApi
}

// NewMockWeatherApi creates a new mock instance.
func NewMockWeatherApi(ctrl *gomock.Controller) *MockWeatherApi {
	mock := &MockWeatherApi{ctrl: ctrl}
	mock.recorder = &MockWeatherApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherApi) EXPECT() *MockWeatherApiMockRecorder {
	return m.recorder
}

// CurrentWeather mocks base method.
func (m *MockWeatherApi) CurrentWeather(ctx context.Context, apiKey, latitude, longitude string) (api.WeatherResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentWeather", ctx, apiKey, latitude, longitude)
	ret0, _ := ret[0].(api.WeatherResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentWeather indicates an expected call of CurrentWeather.
func (mr *MockWeatherApiMockRecorder) CurrentWeather(ctx, apiKey, latitude, longitude any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentWeather", reflect.TypeOf((*MockWeatherApi)(nil).CurrentWeather), ctx, apiKey, latitude, longitude)
}
